<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - CarMax vAuto Bot</title>
    <script src="/socket.io/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .navbar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .navbar-brand {
            font-size: 1.5rem;
            font-weight: 700;
            color: #667eea;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .navbar-user {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-info {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .user-email {
            font-size: 0.9rem;
            color: #6b7280;
        }

        .user-credentials {
            font-size: 0.8rem;
            color: #9ca3af;
        }

        .logout-btn {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: background 0.2s;
        }

        .logout-btn:hover {
            background: #dc2626;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: white;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.9;
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .card h3 {
            font-size: 1.5rem;
            margin-bottom: 20px;
            color: #1f2937;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .button-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .btn {
            padding: 15px 20px;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .progress-container {
            margin-top: 20px;
            padding: 20px;
            background: #f8fafc;
            border-radius: 8px;
            border-left: 4px solid #667eea;
        }

        .progress-title {
            font-weight: 600;
            margin-bottom: 10px;
            color: #374151;
        }

        .progress-log {
            background: #1f2937;
            color: #e5e7eb;
            padding: 15px;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.85rem;
            max-height: 300px;
            overflow-y: auto;
            white-space: pre-wrap;
            word-break: break-word;
        }

        .status-indicator {
            display: inline-block;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-idle {
            background: #6b7280;
        }

        .status-running {
            background: #f59e0b;
            animation: pulse 2s infinite;
        }

        .status-success {
            background: #10b981;
        }

        .status-error {
            background: #ef4444;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .vehicle-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .vehicle-card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.2s ease;
        }

        .vehicle-card:hover {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .vehicle-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: #1f2937;
        }

        .vehicle-details {
            font-size: 0.9rem;
            color: #6b7280;
            line-height: 1.4;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid;
        }

        .alert-info {
            background: #eff6ff;
            border-color: #3b82f6;
            color: #1e40af;
        }

        .alert-warning {
            background: #fffbeb;
            border-color: #f59e0b;
            color: #92400e;
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .navbar {
                padding: 1rem;
                flex-direction: column;
                gap: 1rem;
            }

            .container {
                padding: 15px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .button-group {
                grid-template-columns: 1fr;
            }

            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <!-- Navigation Bar -->
    <nav class="navbar">
        <div class="navbar-brand">
            🚗 CarMax vAuto Bot
        </div>
        <div class="navbar-user">
            <div class="user-info">
                <div class="user-email"><%= user.email %></div>
                <div class="user-credentials">
                    CarMax: <%= user.carmaxEmail %> | vAuto: <%= user.vautoUsername %>
                </div>
            </div>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </div>
    </nav>

    <div class="container">
        <!-- Welcome Section -->
        <div class="header">
            <h1>🎯 Automation Dashboard</h1>
            <p>Streamline your CarMax to vAuto workflow</p>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="vehicleCount">0</div>
                <div class="stat-label">Total Vehicles</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="runningJobs">0</div>
                <div class="stat-label">Active Jobs</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="successRate">0%</div>
                <div class="stat-label">Success Rate</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="lastRun">Never</div>
                <div class="stat-label">Last Run</div>
            </div>
        </div>

        <!-- Control Panel -->
        <div class="card">
            <h3>🎮 Control Panel</h3>
            
            <div class="button-group">
                <button class="btn btn-primary" onclick="startScraping('auctions')" id="scrapeAuctionsBtn">
                    <span class="status-indicator status-idle"></span>
                    Scrape Auctions
                </button>
                <button class="btn btn-secondary" onclick="startScraping('mylist')" id="scrapeMyListBtn">
                    <span class="status-indicator status-idle"></span>
                    Scrape My List
                </button>
                <button class="btn btn-success" onclick="startVAutoEnrichment()" id="vautoBtn">
                    <span class="status-indicator status-idle"></span>
                    vAuto Enrichment
                </button>
                <button class="btn btn-primary" onclick="startCompleteWorkflow('auctions')" id="completeAuctionsBtn">
                    <span class="status-indicator status-idle"></span>
                    Complete (Auctions)
                </button>
                <button class="btn btn-primary" onclick="startCompleteWorkflow('mylist')" id="completeMyListBtn">
                    <span class="status-indicator status-idle"></span>
                    Complete (My List)
                </button>
                <button class="btn btn-danger hidden" onclick="cancelJob()" id="cancelBtn">
                    ⏹️ Cancel Job
                </button>
            </div>

            <div class="button-group">
                <button class="btn btn-secondary" onclick="exportData()">
                    📊 Export Data
                </button>
                <button class="btn btn-secondary" onclick="refreshData()">
                    🔄 Refresh
                </button>
            </div>
        </div>

        <!-- Progress Section -->
        <div class="progress-container hidden" id="progressContainer">
            <div class="progress-title" id="progressTitle">Job Progress</div>
            <div class="progress-log" id="progressLog">Ready to start...</div>
        </div>

        <!-- Vehicle Data -->
        <div class="card">
            <h3>📋 Vehicle Data</h3>
            <div id="vehicleStatus" class="alert alert-info">
                Loading vehicle data...
            </div>
            <div id="vehicleGrid" class="vehicle-grid"></div>
        </div>
    </div>

    <script>
        let socket;
        let currentJob = null;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            initializeSocket();
            loadDashboardData();
        });

        function initializeSocket() {
            socket = io();

            socket.on('connect', () => {
                console.log('Connected to server');
            });

            socket.on('status', (data) => {
                updateDashboard(data);
            });

            socket.on('jobStarted', (data) => {
                handleJobStarted(data);
            });

            socket.on('progress', (data) => {
                updateProgress(data);
            });

            socket.on('jobCompleted', (data) => {
                handleJobCompleted(data);
            });

            socket.on('jobError', (data) => {
                handleJobError(data);
            });

            socket.on('jobCancelled', (data) => {
                handleJobCancelled(data);
            });
        }

        async function loadDashboardData() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                updateDashboard(data);
                
                const vehiclesResponse = await fetch('/api/vehicles');
                const vehicles = await vehiclesResponse.json();
                updateVehicleDisplay(vehicles);
            } catch (error) {
                console.error('Error loading dashboard data:', error);
            }
        }

        function updateDashboard(data) {
            document.getElementById('vehicleCount').textContent = data.vehicleCount || 0;
            document.getElementById('runningJobs').textContent = data.runningJobs ? data.runningJobs.length : 0;
            
            // Update button states based on running jobs
            const hasRunningJobs = data.runningJobs && data.runningJobs.length > 0;
            updateButtonStates(hasRunningJobs, data.runningJobs);
        }

        function updateButtonStates(hasRunningJobs, runningJobs = []) {
            const buttons = document.querySelectorAll('.btn:not(.logout-btn)');
            buttons.forEach(btn => {
                if (btn.id === 'cancelBtn') return;
                
                btn.disabled = hasRunningJobs;
                const indicator = btn.querySelector('.status-indicator');
                if (indicator) {
                    indicator.className = hasRunningJobs ? 'status-indicator status-running' : 'status-indicator status-idle';
                }
            });

            document.getElementById('cancelBtn').classList.toggle('hidden', !hasRunningJobs);
        }

        async function startScraping(mode) {
            try {
                const response = await fetch('/api/scrape/carmax', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ mode })
                });
                
                const data = await response.json();
                if (response.ok) {
                    currentJob = data.jobId;
                    showProgress(`Starting CarMax scraping (${mode} mode)...`);
                } else {
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error starting scraping:', error);
                alert('Error starting scraping');
            }
        }

        async function startVAutoEnrichment() {
            try {
                const response = await fetch('/api/scrape/vauto', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });
                
                const data = await response.json();
                if (response.ok) {
                    currentJob = data.jobId;
                    showProgress('Starting vAuto enrichment...');
                } else {
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error starting vAuto enrichment:', error);
                alert('Error starting vAuto enrichment');
            }
        }

        async function startCompleteWorkflow(mode) {
            try {
                const response = await fetch('/api/scrape/complete', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ mode })
                });
                
                const data = await response.json();
                if (response.ok) {
                    currentJob = data.jobId;
                    showProgress(`Starting complete workflow (${mode} mode)...`);
                } else {
                    alert(data.error);
                }
            } catch (error) {
                console.error('Error starting complete workflow:', error);
                alert('Error starting complete workflow');
            }
        }

        async function cancelJob() {
            if (!currentJob) return;
            
            try {
                const jobType = currentJob.split('_')[0];
                const response = await fetch(`/api/cancel/${jobType}`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    currentJob = null;
                    hideProgress();
                }
            } catch (error) {
                console.error('Error cancelling job:', error);
            }
        }

        async function exportData() {
            try {
                const response = await fetch('/api/vehicles/export');
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `vehicles_export_${new Date().toISOString().split('T')[0]}.json`;
                a.click();
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error exporting data:', error);
                alert('Error exporting data');
            }
        }

        function refreshData() {
            loadDashboardData();
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                window.location.href = '/auth/logout';
            }
        }

        function showProgress(title) {
            document.getElementById('progressContainer').classList.remove('hidden');
            document.getElementById('progressTitle').textContent = title;
            document.getElementById('progressLog').textContent = 'Initializing...\n';
        }

        function hideProgress() {
            document.getElementById('progressContainer').classList.add('hidden');
        }

        function updateProgress(data) {
            const log = document.getElementById('progressLog');
            log.textContent += data.message + '\n';
            log.scrollTop = log.scrollHeight;
        }

        function handleJobStarted(data) {
            showProgress(`${data.type.toUpperCase()} Job Started`);
            updateButtonStates(true);
        }

        function handleJobCompleted(data) {
            updateProgress({ message: `✅ ${data.type.toUpperCase()} job completed successfully!` });
            setTimeout(() => {
                hideProgress();
                loadDashboardData();
            }, 2000);
            currentJob = null;
        }

        function handleJobError(data) {
            updateProgress({ message: `❌ Error: ${data.error}` });
            setTimeout(() => {
                hideProgress();
                loadDashboardData();
            }, 3000);
            currentJob = null;
        }

        function handleJobCancelled(data) {
            updateProgress({ message: `⏹️ ${data.jobType.toUpperCase()} job was cancelled` });
            setTimeout(() => {
                hideProgress();
                loadDashboardData();
            }, 1000);
            currentJob = null;
        }

        function updateVehicleDisplay(vehicles) {
            const statusEl = document.getElementById('vehicleStatus');
            const gridEl = document.getElementById('vehicleGrid');
            
            if (!vehicles || vehicles.length === 0) {
                statusEl.textContent = 'No vehicles found. Start by scraping CarMax data.';
                statusEl.className = 'alert alert-info';
                gridEl.innerHTML = '';
                return;
            }

            statusEl.textContent = `Found ${vehicles.length} vehicles`;
            statusEl.className = 'alert alert-warning';
            
            // Show first 10 vehicles as preview
            const preview = vehicles.slice(0, 10);
            gridEl.innerHTML = preview.map(vehicle => `
                <div class="vehicle-card">
                    <div class="vehicle-title">
                        ${vehicle.year || 'N/A'} ${vehicle.make || 'N/A'} ${vehicle.model || 'N/A'}
                    </div>
                    <div class="vehicle-details">
                        <strong>VIN:</strong> ${vehicle.vin || 'N/A'}<br>
                        <strong>Mileage:</strong> ${vehicle.mileage || 'N/A'}<br>
                        <strong>Price:</strong> ${vehicle.price || 'N/A'}<br>
                        <strong>Location:</strong> ${vehicle.location || 'N/A'}
                    </div>
                </div>
            `).join('');
            
            if (vehicles.length > 10) {
                gridEl.innerHTML += `
                    <div class="vehicle-card" style="display: flex; align-items: center; justify-content: center; background: #f8fafc;">
                        <div style="text-align: center; color: #6b7280;">
                            <div style="font-size: 2rem; margin-bottom: 0.5rem;">📊</div>
                            <div>+${vehicles.length - 10} more vehicles</div>
                            <div style="font-size: 0.8rem; margin-top: 0.5rem;">Export data to see all</div>
                        </div>
                    </div>
                `;
            }
        }
    </script>
</body>
</html>
